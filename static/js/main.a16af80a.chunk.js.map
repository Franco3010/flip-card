{"version":3,"sources":["touchScale.ts","index.ts"],"names":["Compare","accumulate","z","stage","createStage","index","y","x","canvas","getCanvas","viewport","createViewport","gl","getContext","inputHandler","createViewportAwareInputHandler","camera","getCamera","batch","createBatch","whiteTex","createWhiteTexture","backSmall","oldValue","makeSmallItem","makeBigBack","PosiCard","FrontBigger","touchItem","touchItemFake","numberTouchItem","randomIndexArr","touchScale","touchitem","smallBack","frontbig","back","atlat","coorX","coorY","delta","draw","findRegion","checkNumberTouchItem","i","touch","isTouched","targetX","getTouchedWorldCoord","targetY","backsmaller","item","length","frontbiger","Object","entries","key","value","toString","push_IndexOf_RandomIndexArrToCompare","checkLastEle_FrontBig","indexOf","compare","sort","Math","random","a","loadTexture","bgImg","loadAtlas","mainAtlas","clearColor","createGameLoop","clear","COLOR_BUFFER_BIT","setProjection","combined","begin","setColor","end","init"],"mappings":"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","file":"static/js/main.a16af80a.chunk.js","sourcesContent":["import {\r\n  createAnimation,\r\n  createBatch,\r\n  createGameLoop,\r\n  createWhiteTexture,\r\n  TextureRegion,\r\n  loadTexture,\r\n  createStage,\r\n  createViewport,\r\n  createViewportAwareInputHandler,\r\n  PlayMode,\r\n  loadAtlas,\r\n  SpriteBatch,\r\n  TextureAtlas,\r\n  InputHandler\r\n} from 'gdxjs';\r\nimport { ViewportAwareInputHandler } from 'gdxjs/lib/createViewportAwareInputHandler';\r\n\r\nlet Compare = 0;\r\nlet accumulate = 0;\r\nlet accumulate1 = 0;\r\nlet z: number = 100;\r\nconst stage = createStage();\r\nlet index = 0;\r\nlet y: number = 100;\r\nlet x: number = 0;\r\nlet a: number;\r\nlet accuTouchScale = 0;\r\nconst canvas = stage.getCanvas();\r\nexport const viewport = createViewport(canvas, 55, 100);\r\nexport const gl = viewport.getContext();\r\nexport const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\nexport const camera = viewport.getCamera();\r\nexport const batch = createBatch(gl);\r\nexport const whiteTex = createWhiteTexture(gl);\r\n\r\nlet backSmall = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\r\nexport let storeCheckTouch: number[] = [];\r\nexport let oldValue: any[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\nlet makeSmallItem = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\r\nlet makeBigBack = 0;\r\nlet PosiCard: any = [\r\n  { x: 4, y: 25 },\r\n  { x: 20, y: 25 },\r\n  { x: 36, y: 25 },\r\n  { x: 4, y: 41 },\r\n  { x: 20, y: 41 },\r\n  { x: 36, y: 41 },\r\n  { x: 4, y: 57 },\r\n  { x: 20, y: 57 },\r\n  { x: 36, y: 57 },\r\n  { x: 4, y: 73 },\r\n  { x: 20, y: 73 },\r\n  { x: 36, y: 73 }\r\n];\r\nlet FrontBigger = [\r\n  -0.9,\r\n  -0.9,\r\n  -0.9,\r\n  -0.9,\r\n  -0.9,\r\n  -0.9,\r\n  -0.9,\r\n  -0.9,\r\n  -0.9,\r\n  -0.9,\r\n  -0.9,\r\n  -0.9,\r\n  0,\r\n  0\r\n]; //last element check frontBig >1 or not\r\n\r\nlet touchItem = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100];\r\nlet touchItemFake = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\nlet numberTouchItem = 0;\r\n\r\nexport let randomIndexArr = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6];\r\n\r\nrandomIndexArr = randomIndexArr.sort(() => Math.random() - 0.5);\r\n\r\nexport function touchScale(\r\n  touchitem: number | undefined,\r\n  smallBack: number,\r\n  frontbig: number,\r\n  back: TextureRegion,\r\n  atlat: TextureAtlas,\r\n  randomIndexArr: number,\r\n  coorX: number,\r\n  coorY: number,\r\n  delta: number\r\n) {\r\n  if (touchitem == 0) {\r\n    back.draw(batch, coorX, coorY, 15, 15, 5, 5, 0, 1, 1);\r\n  } else if (touchitem == 1 && smallBack > 0.01 && Compare == 0) {\r\n    back.draw(batch, coorX, coorY, 15, 15, 5, 5, 0, smallBack, 1);\r\n  } else if (touchitem == 1 && smallBack < 0.01) {\r\n    if (frontbig < 1 && Compare == 0) {\r\n      atlat\r\n        .findRegion('item', randomIndexArr)\r\n        .draw(batch, coorX, coorY, 15, 15, 5, 5, 0, frontbig, 1);\r\n    } else if (frontbig > 1 && Compare == 0) {\r\n      atlat\r\n        .findRegion('item', randomIndexArr)\r\n        .draw(batch, coorX, coorY, 15, 15, 5, 5, 0, 1, 1);\r\n    }\r\n  }\r\n}\r\n\r\nfunction checkNumberTouchItem() {\r\n  for (let i = 0; i < 12; i++) {\r\n    if (touchItem[i] == 1 && i != x) {\r\n      numberTouchItem += 1;\r\n    }\r\n  }\r\n  return numberTouchItem;\r\n}\r\nexport function touch(inputHandler: ViewportAwareInputHandler) {\r\n  if (inputHandler.isTouched()) {\r\n    const targetX = inputHandler.getTouchedWorldCoord().x;\r\n    const targetY = inputHandler.getTouchedWorldCoord().y;\r\n\r\n    if (\r\n      targetX > 2 &&\r\n      targetX < 16.6 &&\r\n      targetY > 25 &&\r\n      targetY < 39.6 &&\r\n      oldValue[0] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[0] = 1;\r\n      touchItemFake[0] = 1;\r\n    }\r\n    if (\r\n      targetX > 17.6 &&\r\n      targetX < 32.2 &&\r\n      targetY > 25 &&\r\n      targetY < 39.6 &&\r\n      oldValue[1] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[1] = 1;\r\n      touchItemFake[1] = 2;\r\n    }\r\n    if (\r\n      targetX > 33.2 &&\r\n      targetX < 47.8 &&\r\n      targetY > 25 &&\r\n      targetY < 39.6 &&\r\n      oldValue[2] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[2] = 1;\r\n      touchItemFake[2] = 3;\r\n    }\r\n    if (\r\n      targetX > 2 &&\r\n      targetX < 16.6 &&\r\n      targetY > 40.6 &&\r\n      targetY < 55.2 &&\r\n      oldValue[3] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[3] = 1;\r\n      touchItemFake[3] = 4;\r\n    }\r\n    if (\r\n      targetX > 17.6 &&\r\n      targetX < 32.2 &&\r\n      targetY > 40.6 &&\r\n      targetY < 55.2 &&\r\n      oldValue[4] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[4] = 1;\r\n      touchItemFake[4] = 5;\r\n    }\r\n    if (\r\n      targetX > 33.2 &&\r\n      targetX < 47.8 &&\r\n      targetY > 40.6 &&\r\n      targetY < 55.2 &&\r\n      oldValue[5] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[5] = 1;\r\n      touchItemFake[5] = 6;\r\n    }\r\n    if (\r\n      targetX > 2 &&\r\n      targetX < 16.6 &&\r\n      targetY > 56.2 &&\r\n      targetY < 70.8 &&\r\n      oldValue[6] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[6] = 1;\r\n      touchItemFake[6] = 7;\r\n    }\r\n    if (\r\n      targetX > 17.6 &&\r\n      targetX < 32.2 &&\r\n      targetY > 56.2 &&\r\n      targetY < 70.8 &&\r\n      oldValue[7] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[7] = 1;\r\n      touchItemFake[7] = 8;\r\n    }\r\n    if (\r\n      targetX > 33.2 &&\r\n      targetX < 47.8 &&\r\n      targetY > 56.2 &&\r\n      targetY < 70.8 &&\r\n      oldValue[8] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[8] = 1;\r\n      touchItemFake[8] = 9;\r\n    }\r\n    if (\r\n      targetX > 2 &&\r\n      targetX < 16.6 &&\r\n      targetY > 71.8 &&\r\n      targetY < 86.4 &&\r\n      oldValue[9] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[9] = 1;\r\n      touchItemFake[9] = 10;\r\n    }\r\n    if (\r\n      targetX > 17.6 &&\r\n      targetX < 32.2 &&\r\n      targetY > 71.8 &&\r\n      targetY < 86.4 &&\r\n      oldValue[10] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[10] = 1;\r\n      touchItemFake[10] = 11;\r\n    }\r\n    if (\r\n      targetX > 33.2 &&\r\n      targetX < 47.8 &&\r\n      targetY > 71.8 &&\r\n      targetY < 86.4 &&\r\n      oldValue[11] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[11] = 1;\r\n      touchItemFake[11] = 12;\r\n    }\r\n  }\r\n}\r\n\r\nexport function backsmaller(\r\n  item: number,\r\n  delta: number,\r\n  touchitem: number | undefined\r\n) {\r\n  for (let i = 0; i < backSmall.length; i++) {\r\n    if (i == item) {\r\n      break;\r\n    }\r\n  }\r\n  if (touchitem == 1) {\r\n    return (backSmall[item] -= 7 * delta);\r\n  } else {\r\n    return backSmall[item];\r\n  }\r\n}\r\nexport function frontbiger(\r\n  item: number,\r\n  delta: number,\r\n  touchitem: number | undefined\r\n) {\r\n  if (touchitem == 1) {\r\n    return (FrontBigger[item] += 7 * delta);\r\n  } else {\r\n    return FrontBigger[item];\r\n  }\r\n}\r\nexport function touchitem(item: number) {\r\n  for (const [key, value] of Object.entries(touchItem)) {\r\n    if (key == item.toString()) {\r\n      return value;\r\n    }\r\n  }\r\n}\r\n//check\r\nexport function push_IndexOf_RandomIndexArrToCompare() {\r\n  //  rs touchItem 12,13,14\r\n  for (let i = 0; i < touchItemFake.length; i++) {\r\n    if (touchItemFake[i] != 0 && y == 100) {\r\n      x = touchItemFake[i] - 1;\r\n      y = 1;\r\n    }\r\n  }\r\n  for (let i = 0; i < touchItemFake.length; i++) {\r\n    if (touchItemFake[i] != 0 && y != 100 && touchItemFake[i] - 1 != x) {\r\n      z = touchItemFake[i] - 1;\r\n    }\r\n  }\r\n}\r\n\r\nexport function checkLastEle_FrontBig() {\r\n  // reset FrontBigger[12] = 0, FrontBigger[13] = 0,index =100\r\n  for (let i = 0; i < 12; i++) {\r\n    if (FrontBigger[i] > 1) {\r\n      if (FrontBigger[12] < 1) {\r\n        FrontBigger[12] += FrontBigger[i];\r\n        index = FrontBigger.indexOf(FrontBigger[i]);\r\n      }\r\n      if (FrontBigger[13] < 1 && FrontBigger.indexOf(FrontBigger[i]) != index) {\r\n        FrontBigger[13] += FrontBigger[i];\r\n      }\r\n    }\r\n  }\r\n}\r\n//frontBig,toa do xy,\r\nexport function checkCardPosi() {\r\n  for (let i = 0; i < 12; i++) {\r\n    if (x == i) {\r\n      PosiCard[12] = i;\r\n    }\r\n    if (z == i && i != x) {\r\n      PosiCard[13] = i;\r\n    }\r\n  }\r\n}\r\n\r\nexport function compare(\r\n  delta: number,\r\n  atlat: TextureAtlas,\r\n  back: TextureRegion\r\n) {\r\n  if (FrontBigger[12] > 1 && FrontBigger[13] > 1) {\r\n    Compare = 1;\r\n\r\n    if (randomIndexArr[x] != randomIndexArr[z]) {\r\n      accumulate += delta;\r\n      if (accumulate < 0.5) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr[x])\r\n          .draw(batch, PosiCard[x].x, PosiCard[x].y, 15, 15, 5, 5, 0, 1, 1);\r\n        atlat\r\n          .findRegion('item', randomIndexArr[z])\r\n          .draw(batch, PosiCard[z].x, PosiCard[z].y, 15, 15, 5, 5, 0, 1, 1);\r\n      }\r\n      if (\r\n        makeSmallItem[x] > 0.01 &&\r\n        makeSmallItem[z] > 0.02 &&\r\n        accumulate > 0.5\r\n      ) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr[x])\r\n          .draw(\r\n            batch,\r\n            PosiCard[x].x,\r\n            PosiCard[x].y,\r\n            15,\r\n            15,\r\n            5,\r\n            5,\r\n            0,\r\n            (makeSmallItem[x] -= 7 * delta),\r\n            1\r\n          );\r\n        atlat\r\n          .findRegion('item', randomIndexArr[z])\r\n          .draw(\r\n            batch,\r\n            PosiCard[z].x,\r\n            PosiCard[z].y,\r\n            15,\r\n            15,\r\n            5,\r\n            5,\r\n            0,\r\n            (makeSmallItem[z] -= 7 * delta),\r\n            1\r\n          );\r\n      }\r\n\r\n      if (\r\n        makeSmallItem[x] < 0.01 &&\r\n        makeSmallItem[z] < 0.01 &&\r\n        makeBigBack < 1\r\n      ) {\r\n        accumulate1 += delta;\r\n        back.draw(\r\n          batch,\r\n          PosiCard[x].x,\r\n          PosiCard[x].y,\r\n          15,\r\n          15,\r\n          7.3,\r\n          7.3,\r\n          0,\r\n          (makeBigBack += 6 * delta),\r\n          1\r\n        );\r\n\r\n        back.draw(\r\n          batch,\r\n          PosiCard[z].x,\r\n          PosiCard[z].y,\r\n          15,\r\n          15,\r\n          7.3,\r\n          7.3,\r\n          0,\r\n          (makeBigBack += 6 * delta),\r\n          1\r\n        );\r\n      }\r\n      if (makeBigBack > 1) {\r\n        back.draw(batch, PosiCard[x].x, PosiCard[x].y, 15, 15, 5, 5, 0, 1, 1);\r\n\r\n        back.draw(batch, PosiCard[z].x, PosiCard[z].y, 15, 15, 5, 5, 0, 1, 1);\r\n        touchItem[x] = 0; // rs touchItem\r\n        touchItem[z] = 0;\r\n        backSmall[x] = 1;\r\n        backSmall[z] = 1;\r\n        makeBigBack = 0;\r\n        makeSmallItem[x] = 1;\r\n        makeSmallItem[z] = 1;\r\n        FrontBigger[x] = -0.9;\r\n        FrontBigger[z] = -0.9;\r\n        Compare = 0;\r\n        accumulate = 0;\r\n        accumulate1 = 0;\r\n        touchItemFake[x] = 0;\r\n        touchItemFake[z] = 0;\r\n        FrontBigger[12] = 0;\r\n        FrontBigger[13] = 0;\r\n        numberTouchItem = 0;\r\n        index = 100;\r\n        z = 100;\r\n        y = 100;\r\n        x = 99;\r\n      }\r\n    } else {\r\n      if (makeSmallItem[x] > 0.02 && makeSmallItem[z] > 0.02) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr[x])\r\n          .draw(\r\n            batch,\r\n            PosiCard[x].x,\r\n            PosiCard[x].y,\r\n            15,\r\n            15,\r\n            5,\r\n            5,\r\n            0,\r\n            (makeSmallItem[x] -= 3 * delta),\r\n            (makeSmallItem[x] -= 3 * delta)\r\n          );\r\n        atlat\r\n          .findRegion('item', randomIndexArr[z])\r\n          .draw(\r\n            batch,\r\n            PosiCard[z].x,\r\n            PosiCard[z].y,\r\n            15,\r\n            15,\r\n            5,\r\n            5,\r\n            0,\r\n            (makeSmallItem[z] -= 3 * delta),\r\n            (makeSmallItem[x] -= 3 * delta)\r\n          );\r\n        oldValue[x] = 1;\r\n        oldValue[z] = 1;\r\n      }\r\n      if (makeSmallItem[x] < 0.02) {\r\n        touchItem[x] = 0; // rs touchItem\r\n        touchItem[z] = 0;\r\n        backSmall[x] = 1;\r\n        backSmall[z] = 1;\r\n\r\n        makeSmallItem[x] = 1;\r\n        makeSmallItem[z] = 1;\r\n\r\n        FrontBigger[x] = 0;\r\n        FrontBigger[z] = 0;\r\n\r\n        Compare = 0;\r\n        touchItemFake[x] = 0;\r\n        touchItemFake[z] = 0;\r\n\r\n        FrontBigger[12] = 0;\r\n        FrontBigger[13] = 0;\r\n        numberTouchItem = 0;\r\n        index = 100;\r\n        z = 100;\r\n        y = 100;\r\n        x = 99;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import './index.css';\nimport { createGameLoop, loadTexture, loadAtlas } from 'gdxjs';\nimport {\n  backsmaller,\n  frontbiger,\n  touchitem,\n  touch,\n  touchScale,\n  gl,\n  batch,\n  whiteTex,\n  inputHandler,\n  camera,\n  push_IndexOf_RandomIndexArrToCompare,\n  checkLastEle_FrontBig,\n  compare,\n  randomIndexArr,\n  oldValue\n} from './touchScale';\nconst init = async () => {\n  const bgImg = await loadTexture(gl, './bg.png');\n\n  // const cardImgs  = await loadTexture(gl,)\n  const mainAtlas = await loadAtlas(gl, './shopee.atlas', {});\n  const back = mainAtlas.findRegion('back', -1);\n\n  gl.clearColor(1, 0.4, 0.3, 1);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.draw(whiteTex, 0, 0, 60, 120);\n    batch.draw(bgImg, 0, 0, 60, 100);\n    touch(inputHandler);\n\n    if (oldValue[0] == 0) {\n      touchScale(\n        touchitem(0),\n        backsmaller(0, delta, touchitem(0)),\n        frontbiger(0, delta, touchitem(0)),\n        back,\n        mainAtlas,\n        randomIndexArr[0],\n        4,\n        25,\n        delta\n      );\n    }\n    if (oldValue[1] == 0) {\n      touchScale(\n        touchitem(1),\n        backsmaller(1, delta, touchitem(1)),\n        frontbiger(1, delta, touchitem(1)),\n        back,\n        mainAtlas,\n        randomIndexArr[1],\n        20,\n        25,\n        delta\n      );\n    }\n    if (oldValue[2] == 0) {\n      touchScale(\n        touchitem(2),\n        backsmaller(2, delta, touchitem(2)),\n        frontbiger(2, delta, touchitem(2)),\n        back,\n        mainAtlas,\n        randomIndexArr[2],\n        36,\n        25,\n        delta\n      );\n    }\n    if (oldValue[3] == 0) {\n      touchScale(\n        touchitem(3),\n        backsmaller(3, delta, touchitem(3)),\n        frontbiger(3, delta, touchitem(3)),\n        back,\n        mainAtlas,\n        randomIndexArr[3],\n        4,\n        41,\n        delta\n      );\n    }\n    if (oldValue[4] == 0) {\n      touchScale(\n        touchitem(4),\n        backsmaller(4, delta, touchitem(4)),\n        frontbiger(4, delta, touchitem(4)),\n        back,\n        mainAtlas,\n        randomIndexArr[4],\n        20,\n        41,\n        delta\n      );\n    }\n    if (oldValue[5] == 0) {\n      touchScale(\n        touchitem(5),\n        backsmaller(5, delta, touchitem(5)),\n        frontbiger(5, delta, touchitem(5)),\n        back,\n        mainAtlas,\n        randomIndexArr[5],\n        36,\n        41,\n        delta\n      );\n    }\n    if (oldValue[6] == 0) {\n      touchScale(\n        touchitem(6),\n        backsmaller(6, delta, touchitem(6)),\n        frontbiger(6, delta, touchitem(6)),\n        back,\n        mainAtlas,\n        randomIndexArr[6],\n        4,\n        57,\n        delta\n      );\n    }\n    if (oldValue[7] == 0) {\n      touchScale(\n        touchitem(7),\n        backsmaller(7, delta, touchitem(7)),\n        frontbiger(7, delta, touchitem(7)),\n        back,\n        mainAtlas,\n        randomIndexArr[7],\n        20,\n        57,\n        delta\n      );\n    }\n    if (oldValue[8] == 0) {\n      touchScale(\n        touchitem(8),\n        backsmaller(8, delta, touchitem(8)),\n        frontbiger(8, delta, touchitem(8)),\n        back,\n        mainAtlas,\n        randomIndexArr[8],\n        36,\n        57,\n        delta\n      );\n    }\n    if (oldValue[9] == 0) {\n      touchScale(\n        touchitem(9),\n        backsmaller(9, delta, touchitem(9)),\n        frontbiger(9, delta, touchitem(9)),\n        back,\n        mainAtlas,\n        randomIndexArr[9],\n        4,\n        73,\n        delta\n      );\n    }\n    if (oldValue[10] == 0) {\n      touchScale(\n        touchitem(10),\n        backsmaller(10, delta, touchitem(10)),\n        frontbiger(10, delta, touchitem(10)),\n        back,\n        mainAtlas,\n        randomIndexArr[10],\n        20,\n        73,\n        delta\n      );\n    }\n    if (oldValue[11] == 0) {\n      touchScale(\n        touchitem(11),\n        backsmaller(11, delta, touchitem(11)),\n        frontbiger(11, delta, touchitem(11)),\n        back,\n        mainAtlas,\n        randomIndexArr[11],\n        36,\n        73,\n        delta\n      );\n    }\n\n    push_IndexOf_RandomIndexArrToCompare();\n    checkLastEle_FrontBig();\n\n    compare(delta, mainAtlas, back);\n\n    batch.setColor(0.4, 0.4, 0.4, 1);\n\n    batch.setColor(1, 1, 1, 1);\n\n    batch.end();\n  });\n};\n\ninit();\n"],"sourceRoot":""}