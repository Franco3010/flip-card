{"version":3,"sources":["touchScale.ts","index.ts"],"names":["Compare","accumulate","z","stage","createStage","index","y","x","canvas","getCanvas","viewport","createViewport","gl","getContext","inputHandler","createViewportAwareInputHandler","camera","getCamera","batch","createBatch","whiteTex","createWhiteTexture","backSmall","oldValue","makeSmallItem","makeBigBack","PosiCard","FrontBigger","touchItem","touchItemFake","numberTouchItem","randomIndexArr","touchScale","touchitem","smallBack","frontbig","back","atlat","coorX","coorY","draw","findRegion","checkNumberTouchItem","i","touch","isTouched","targetX","getTouchedWorldCoord","targetY","backsmaller","item","delta","length","frontbiger","Object","entries","key","value","toString","push_IndexOf_RandomIndexArrToCompare","console","log","checkLastEle_FrontBig","indexOf","compare","sort","Math","random","a","loadTexture","bgImg","loadAtlas","mainAtlas","clearColor","createGameLoop","clear","COLOR_BUFFER_BIT","setProjection","combined","begin","setColor","end","init"],"mappings":"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","file":"static/js/main.eb827fd1.chunk.js","sourcesContent":["import {\r\n  createAnimation,\r\n  createBatch,\r\n  createGameLoop,\r\n  createWhiteTexture,\r\n  TextureRegion,\r\n  loadTexture,\r\n  createStage,\r\n  createViewport,\r\n  createViewportAwareInputHandler,\r\n  PlayMode,\r\n  loadAtlas,\r\n  SpriteBatch,\r\n  TextureAtlas,\r\n  InputHandler\r\n} from 'gdxjs';\r\nimport { ViewportAwareInputHandler } from 'gdxjs/lib/createViewportAwareInputHandler';\r\n\r\nlet Compare = 0;\r\nlet accumulate = 0;\r\nlet z: number = 100;\r\nconst stage = createStage();\r\nlet index = 0;\r\nlet y: number = 100;\r\nlet x: number = 0;\r\nlet a: number;\r\n\r\nconst canvas = stage.getCanvas();\r\nexport const viewport = createViewport(canvas, 55, 100);\r\nexport const gl = viewport.getContext();\r\nexport const inputHandler = createViewportAwareInputHandler(canvas, viewport);\r\nexport const camera = viewport.getCamera();\r\nexport const batch = createBatch(gl);\r\nexport const whiteTex = createWhiteTexture(gl);\r\n\r\nlet backSmall = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\r\nexport let storeCheckTouch: number[] = [];\r\nexport let oldValue: any[] = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\nlet makeSmallItem = [1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1];\r\nlet makeBigBack = 0;\r\nlet PosiCard: any = [\r\n  { x: 2, y: 25 },\r\n  { x: 17.6, y: 25 },\r\n  { x: 33.2, y: 25 },\r\n  { x: 2, y: 40.6 },\r\n  { x: 17.6, y: 40.6 },\r\n  { x: 33.2, y: 40.6 },\r\n  { x: 2, y: 56.2 },\r\n  { x: 17.6, y: 56.2 },\r\n  { x: 33.2, y: 56.2 },\r\n  { x: 2, y: 71.8 },\r\n  { x: 17.6, y: 71.8 },\r\n  { x: 33.2, y: 71.8 }\r\n];\r\nlet FrontBigger = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]; //last element check frontBig >1 or not\r\n\r\nlet touchItem = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 100];\r\nlet touchItemFake = [0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0];\r\nlet numberTouchItem = 0;\r\n\r\nexport let randomIndexArr = [1, 2, 3, 4, 5, 6, 1, 2, 3, 4, 5, 6];\r\n\r\nrandomIndexArr = randomIndexArr.sort(() => Math.random() - 0.5);\r\n\r\nexport function touchScale(\r\n  touchitem: number | undefined,\r\n  smallBack: number,\r\n  frontbig: number,\r\n  back: TextureRegion,\r\n  atlat: TextureAtlas,\r\n  randomIndexArr: number,\r\n  coorX: number,\r\n  coorY: number\r\n) {\r\n  if (touchitem == 0) {\r\n    back.draw(batch, coorX, coorY, 13.6, 13.6, 5, 5, 0, 1, 1);\r\n  } else if (touchitem == 1) {\r\n    if (smallBack > 0.01 && Compare == 0) {\r\n      back.draw(batch, coorX, coorY, 13.6, 13.6, 5, 5, 0, smallBack, 1);\r\n    } else if (smallBack < 0.01) {\r\n      if (frontbig < 1 && Compare == 0) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr)\r\n          .draw(batch, coorX, coorY, 13.6, 13.6, 5, 5, 0, frontbig, 1);\r\n      } else if (frontbig > 1 && Compare == 0) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr)\r\n          .draw(batch, coorX, coorY, 13.6, 13.6, 5, 5, 0, 1, 1);\r\n      }\r\n    }\r\n  }\r\n}\r\nfunction checkNumberTouchItem() {\r\n  for (let i = 0; i < 12; i++) {\r\n    if (touchItem[i] == 1 && i != x) {\r\n      numberTouchItem += 1;\r\n    }\r\n  }\r\n  return numberTouchItem;\r\n}\r\nexport function touch(inputHandler: ViewportAwareInputHandler) {\r\n  if (inputHandler.isTouched()) {\r\n    const targetX = inputHandler.getTouchedWorldCoord().x;\r\n    const targetY = inputHandler.getTouchedWorldCoord().y;\r\n\r\n    if (\r\n      targetX > 2 &&\r\n      targetX < 16.6 &&\r\n      targetY > 25 &&\r\n      targetY < 39.6 &&\r\n      oldValue[0] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[0] = 1;\r\n      touchItemFake[0] = 1;\r\n    }\r\n    if (\r\n      targetX > 17.6 &&\r\n      targetX < 32.2 &&\r\n      targetY > 25 &&\r\n      targetY < 39.6 &&\r\n      oldValue[1] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[1] = 1;\r\n      touchItemFake[1] = 2;\r\n    }\r\n    if (\r\n      targetX > 33.2 &&\r\n      targetX < 47.8 &&\r\n      targetY > 25 &&\r\n      targetY < 39.6 &&\r\n      oldValue[2] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[2] = 1;\r\n      touchItemFake[2] = 3;\r\n    }\r\n    if (\r\n      targetX > 2 &&\r\n      targetX < 16.6 &&\r\n      targetY > 40.6 &&\r\n      targetY < 55.2 &&\r\n      oldValue[3] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[3] = 1;\r\n      touchItemFake[3] = 4;\r\n    }\r\n    if (\r\n      targetX > 17.6 &&\r\n      targetX < 32.2 &&\r\n      targetY > 40.6 &&\r\n      targetY < 55.2 &&\r\n      oldValue[4] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[4] = 1;\r\n      touchItemFake[4] = 5;\r\n    }\r\n    if (\r\n      targetX > 33.2 &&\r\n      targetX < 47.8 &&\r\n      targetY > 40.6 &&\r\n      targetY < 55.2 &&\r\n      oldValue[5] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[5] = 1;\r\n      touchItemFake[5] = 6;\r\n    }\r\n    if (\r\n      targetX > 2 &&\r\n      targetX < 16.6 &&\r\n      targetY > 56.2 &&\r\n      targetY < 70.8 &&\r\n      oldValue[6] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[6] = 1;\r\n      touchItemFake[6] = 7;\r\n    }\r\n    if (\r\n      targetX > 17.6 &&\r\n      targetX < 32.2 &&\r\n      targetY > 56.2 &&\r\n      targetY < 70.8 &&\r\n      oldValue[7] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[7] = 1;\r\n      touchItemFake[7] = 8;\r\n    }\r\n    if (\r\n      targetX > 33.2 &&\r\n      targetX < 47.8 &&\r\n      targetY > 56.2 &&\r\n      targetY < 70.8 &&\r\n      oldValue[8] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[8] = 1;\r\n      touchItemFake[8] = 9;\r\n    }\r\n    if (\r\n      targetX > 2 &&\r\n      targetX < 16.6 &&\r\n      targetY > 71.8 &&\r\n      targetY < 86.4 &&\r\n      oldValue[9] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[9] = 1;\r\n      touchItemFake[9] = 10;\r\n    }\r\n    if (\r\n      targetX > 17.6 &&\r\n      targetX < 32.2 &&\r\n      targetY > 71.8 &&\r\n      targetY < 86.4 &&\r\n      oldValue[10] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[10] = 1;\r\n      touchItemFake[10] = 11;\r\n    }\r\n    if (\r\n      targetX > 33.2 &&\r\n      targetX < 47.8 &&\r\n      targetY > 71.8 &&\r\n      targetY < 86.4 &&\r\n      oldValue[11] == 0 &&\r\n      checkNumberTouchItem() <= 2\r\n    ) {\r\n      touchItem[11] = 1;\r\n      touchItemFake[11] = 12;\r\n    }\r\n  }\r\n}\r\n\r\nexport function backsmaller(\r\n  item: number,\r\n  delta: number,\r\n  touchitem: number | undefined\r\n) {\r\n  for (let i = 0; i < backSmall.length; i++) {\r\n    if (i == item) {\r\n      break;\r\n    }\r\n  }\r\n  if (touchitem == 1) {\r\n    return (backSmall[item] -= 8 * delta);\r\n  } else {\r\n    return backSmall[item];\r\n  }\r\n}\r\nexport function frontbiger(\r\n  item: number,\r\n  delta: number,\r\n  touchitem: number | undefined\r\n) {\r\n  for (let i = 0; i < FrontBigger.length; i++) {\r\n    if (i == item) {\r\n      break;\r\n    }\r\n  }\r\n  if (touchitem == 1) {\r\n    return (FrontBigger[item] += 8 * delta);\r\n  } else {\r\n    return FrontBigger[item];\r\n  }\r\n}\r\nexport function touchitem(item: number) {\r\n  for (const [key, value] of Object.entries(touchItem)) {\r\n    if (key == item.toString()) {\r\n      return value;\r\n    }\r\n  }\r\n}\r\n//check\r\nexport function push_IndexOf_RandomIndexArrToCompare() {\r\n  //  rs touchItem 12,13,14\r\n  for (let i = 0; i < touchItemFake.length; i++) {\r\n    if (touchItemFake[i] != 0 && y == 100) {\r\n      x = touchItemFake[i] - 1;\r\n      y = 1;\r\n    }\r\n  }\r\n  for (let i = 0; i < touchItemFake.length; i++) {\r\n    if (touchItemFake[i] != 0 && y != 100 && touchItemFake[i] - 1 != x) {\r\n      z = touchItemFake[i] - 1;\r\n    }\r\n  }\r\n  console.log(numberTouchItem);\r\n}\r\n\r\nexport function checkLastEle_FrontBig() {\r\n  // reset FrontBigger[12] = 0, FrontBigger[13] = 0,index =100\r\n  for (let i = 0; i < 12; i++) {\r\n    if (FrontBigger[i] > 1) {\r\n      if (FrontBigger[12] < 1) {\r\n        FrontBigger[12] += FrontBigger[i];\r\n        index = FrontBigger.indexOf(FrontBigger[i]);\r\n      }\r\n      if (FrontBigger[13] < 1 && FrontBigger.indexOf(FrontBigger[i]) != index) {\r\n        FrontBigger[13] += FrontBigger[i];\r\n      }\r\n    }\r\n  }\r\n}\r\n//frontBig,toa do xy,\r\nexport function checkCardPosi() {\r\n  for (let i = 0; i < 12; i++) {\r\n    if (x == i) {\r\n      PosiCard[12] = i;\r\n    }\r\n    if (z == i && i != x) {\r\n      PosiCard[13] = i;\r\n    }\r\n  }\r\n}\r\nexport function compare(\r\n  delta: number,\r\n  atlat: TextureAtlas,\r\n  back: TextureRegion\r\n) {\r\n  if (FrontBigger[12] > 1 && FrontBigger[13] > 1) {\r\n    Compare = 1;\r\n\r\n    if (randomIndexArr[x] != randomIndexArr[z]) {\r\n      accumulate += delta;\r\n      if (accumulate < 0.5) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr[x])\r\n          .draw(batch, PosiCard[x].x, PosiCard[x].y, 13.6, 13.6, 5, 5, 0, 1, 1);\r\n        atlat\r\n          .findRegion('item', randomIndexArr[z])\r\n          .draw(batch, PosiCard[z].x, PosiCard[z].y, 13.6, 13.6, 5, 5, 0, 1, 1);\r\n      }\r\n      if (\r\n        makeSmallItem[x] > 0.01 &&\r\n        makeSmallItem[z] > 0.02 &&\r\n        accumulate > 0.5\r\n      ) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr[x])\r\n          .draw(\r\n            batch,\r\n            PosiCard[x].x,\r\n            PosiCard[x].y,\r\n            13.6,\r\n            13.6,\r\n            5,\r\n            5,\r\n            0,\r\n            (makeSmallItem[x] -= 8 * delta),\r\n            1\r\n          );\r\n        atlat\r\n          .findRegion('item', randomIndexArr[z])\r\n          .draw(\r\n            batch,\r\n            PosiCard[z].x,\r\n            PosiCard[z].y,\r\n            13.6,\r\n            13.6,\r\n            5,\r\n            5,\r\n            0,\r\n            (makeSmallItem[z] -= 8 * delta),\r\n            1\r\n          );\r\n      }\r\n\r\n      if (makeSmallItem[x] < 0.01 && makeBigBack < 1) {\r\n        back.draw(\r\n          batch,\r\n          PosiCard[x].x,\r\n          PosiCard[x].y,\r\n          13.6,\r\n          13.6,\r\n          7.3,\r\n          7.3,\r\n          0,\r\n          (makeBigBack += 8 * delta),\r\n          1\r\n        );\r\n\r\n        back.draw(\r\n          batch,\r\n          PosiCard[z].x,\r\n          PosiCard[z].y,\r\n          13.6,\r\n          13.6,\r\n          7.3,\r\n          7.3,\r\n          0,\r\n          (makeBigBack += 8 * delta),\r\n          1\r\n        );\r\n      }\r\n      if (makeBigBack > 1) {\r\n        back.draw(\r\n          batch,\r\n          PosiCard[x].x,\r\n          PosiCard[x].y,\r\n          13.6,\r\n          13.6,\r\n          5,\r\n          5,\r\n          0,\r\n          1,\r\n          1\r\n        );\r\n\r\n        back.draw(\r\n          batch,\r\n          PosiCard[z].x,\r\n          PosiCard[z].y,\r\n          13.6,\r\n          13.6,\r\n          5,\r\n          5,\r\n          0,\r\n          1,\r\n          1\r\n        );\r\n        touchItem[x] = 0; // rs touchItem\r\n        touchItem[z] = 0;\r\n        backSmall[x] = 1;\r\n        backSmall[z] = 1;\r\n        makeBigBack = 0;\r\n        makeSmallItem[x] = 1;\r\n        makeSmallItem[z] = 1;\r\n        FrontBigger[x] = 0;\r\n        FrontBigger[z] = 0;\r\n        Compare = 0;\r\n        accumulate = 0;\r\n        touchItemFake[x] = 0;\r\n        touchItemFake[z] = 0;\r\n        FrontBigger[12] = 0;\r\n        FrontBigger[13] = 0;\r\n        numberTouchItem = 0;\r\n        index = 100;\r\n        z = 100;\r\n        y = 100;\r\n        x = 99;\r\n      }\r\n    } else {\r\n      if (makeSmallItem[x] > 0.02 && makeSmallItem[z] > 0.02) {\r\n        atlat\r\n          .findRegion('item', randomIndexArr[x])\r\n          .draw(\r\n            batch,\r\n            PosiCard[x].x,\r\n            PosiCard[x].y,\r\n            13.6,\r\n            13.6,\r\n            5,\r\n            5,\r\n            0,\r\n            (makeSmallItem[x] -= 3 * delta),\r\n            (makeSmallItem[x] -= 3 * delta)\r\n          );\r\n        atlat\r\n          .findRegion('item', randomIndexArr[z])\r\n          .draw(\r\n            batch,\r\n            PosiCard[z].x,\r\n            PosiCard[z].y,\r\n            13.6,\r\n            13.6,\r\n            5,\r\n            5,\r\n            0,\r\n            (makeSmallItem[z] -= 3 * delta),\r\n            (makeSmallItem[x] -= 3 * delta)\r\n          );\r\n        oldValue[x] = 1;\r\n        oldValue[z] = 1;\r\n      }\r\n      if (makeSmallItem[x] < 0.02) {\r\n        touchItem[x] = 0; // rs touchItem\r\n        touchItem[z] = 0;\r\n        backSmall[x] = 1;\r\n        backSmall[z] = 1;\r\n\r\n        makeSmallItem[x] = 1;\r\n        makeSmallItem[z] = 1;\r\n\r\n        FrontBigger[x] = 0;\r\n        FrontBigger[z] = 0;\r\n\r\n        Compare = 0;\r\n        touchItemFake[x] = 0;\r\n        touchItemFake[z] = 0;\r\n\r\n        FrontBigger[12] = 0;\r\n        FrontBigger[13] = 0;\r\n        numberTouchItem = 0;\r\n        index = 100;\r\n        z = 100;\r\n        y = 100;\r\n        x = 99;\r\n      }\r\n    }\r\n  }\r\n}\r\n","import './index.css';\nimport {\n  createAnimation,\n  createBatch,\n  createGameLoop,\n  createWhiteTexture,\n  TextureRegion,\n  loadTexture,\n  createStage,\n  createViewport,\n  createViewportAwareInputHandler,\n  PlayMode,\n  loadAtlas\n} from 'gdxjs';\nimport {\n  backsmaller,\n  frontbiger,\n  touchitem,\n  touch,\n  touchScale,\n  gl,\n  batch,\n  whiteTex,\n  inputHandler,\n  camera,\n  push_IndexOf_RandomIndexArrToCompare,\n  checkLastEle_FrontBig,\n  checkCardPosi,\n  compare,\n  storeCheckTouch,\n  randomIndexArr,\n  oldValue\n} from './touchScale';\nconst init = async () => {\n  // image.image();\n  // let scaleBack0 = 1;\n  // let scaleBack1 = 1;\n  // let scaleBackCompare =0 ;\n  // let scaleItem1 = 1.2;\n  // let scaleItem2 = 1.2\n  // let scaleCloth = 0;\n  // let scaleShoe = 0;\n  // let Compare = 0;\n  let accumulate = 0;\n\n  // let touchCloth = 0;\n\n  // let touchShoe = 0;\n\n  const compareValue: (any | number)[] = [];\n\n  const bgImg = await loadTexture(gl, './bg.png');\n  const cardImgs = await loadTexture(gl, './playing-cards.png');\n  // const cardImgs  = await loadTexture(gl,)\n  const mainAtlas = await loadAtlas(gl, './shopee.atlas', {});\n  const back = mainAtlas.findRegion('back', -1);\n  const clothRegion = mainAtlas.findRegion('item', 1);\n  const shoeRegion = mainAtlas.findRegion('item', 2);\n  const hatRegion = mainAtlas.findRegion('item', 3);\n  const lampRegion = mainAtlas.findRegion('item', 4);\n  const bearRegion = mainAtlas.findRegion('item', 5);\n  const microWaveRegion = mainAtlas.findRegion('item', 6);\n  const shadow = mainAtlas.findRegion('shadow', -1);\n  let inforOb = {};\n  let x: number;\n  let y: number;\n  let z = 0;\n\n  gl.clearColor(1, 0.4, 0.3, 1);\n  createGameLoop(delta => {\n    gl.clear(gl.COLOR_BUFFER_BIT);\n    batch.setProjection(camera.combined);\n    batch.begin();\n    batch.draw(whiteTex, 0, 0, 50, 100);\n    batch.draw(bgImg, 0, 0, 50, 100);\n    touch(inputHandler);\n    // if (inputHandler.isTouched()) {\n    //   const targetX = inputHandler.getTouchedWorldCoord().x;\n    //   const targetY = inputHandler.getTouchedWorldCoord().y;\n    //   if (targetX > 2 && targetX < 16.6) {\n    //     touchCloth = 1;\n    //     compareValue[0] = randomIndexArr[0];\n\n    //   }\n    //   if (targetX > 17.6 && targetX < 32.2) {\n    //     touchShoe = 1;\n    //     compareValue[1] = randomIndexArr[1];\n\n    //   }\n    // }\n\n    // if (touchCloth == 0) {//chua cham\n    //   back.draw(batch, 2, 25, 14.6, 14.6, 5, 5, 0, 1, 1);\n    // }\n    // else if (touchCloth == 1) {//da cham\n    //   if (scaleBack0 > 0.01  && Compare ==0) {\n    //     back.draw(batch,2,25,14.6,14.6,5,5,0,scaleBack0 -= 5 * delta,1);\n    //   }\n    //   else if (scaleBack0 < 0.01) {\n    //     if (scaleCloth < 1  && Compare ==0) {\n    //       mainAtlas.findRegion('item', randomIndexArr[0]).draw(batch, 2, 25, 14.6, 14.6, 5, 5, 0, scaleCloth += 5 * delta,1);\n    //     }\n    //     else if(scaleCloth>1 && Compare ==0){\n    //       mainAtlas.findRegion('item', randomIndexArr[0]).draw(batch, 2, 25, 14.6, 14.6, 5, 5, 0, 1,1);\n    // }\n    //   }\n    // }\n    if (oldValue[0] == 0) {\n      touchScale(\n        touchitem(0),\n        backsmaller(0, delta, touchitem(0)),\n        frontbiger(0, delta, touchitem(0)),\n        back,\n        mainAtlas,\n        randomIndexArr[0],\n        2,\n        25\n      );\n    }\n    if (oldValue[1] == 0) {\n      touchScale(\n        touchitem(1),\n        backsmaller(1, delta, touchitem(1)),\n        frontbiger(1, delta, touchitem(1)),\n        back,\n        mainAtlas,\n        randomIndexArr[1],\n        17.6,\n        25\n      );\n    }\n    if (oldValue[2] == 0) {\n      touchScale(\n        touchitem(2),\n        backsmaller(2, delta, touchitem(2)),\n        frontbiger(2, delta, touchitem(2)),\n        back,\n        mainAtlas,\n        randomIndexArr[2],\n        33.2,\n        25\n      );\n    }\n    if (oldValue[3] == 0) {\n      touchScale(\n        touchitem(3),\n        backsmaller(3, delta, touchitem(3)),\n        frontbiger(3, delta, touchitem(3)),\n        back,\n        mainAtlas,\n        randomIndexArr[3],\n        2,\n        40.6\n      );\n    }\n    if (oldValue[4] == 0) {\n      touchScale(\n        touchitem(4),\n        backsmaller(4, delta, touchitem(4)),\n        frontbiger(4, delta, touchitem(4)),\n        back,\n        mainAtlas,\n        randomIndexArr[4],\n        17.6,\n        40.6\n      );\n    }\n    if (oldValue[5] == 0) {\n      touchScale(\n        touchitem(5),\n        backsmaller(5, delta, touchitem(5)),\n        frontbiger(5, delta, touchitem(5)),\n        back,\n        mainAtlas,\n        randomIndexArr[5],\n        33.2,\n        40.6\n      );\n    }\n    if (oldValue[6] == 0) {\n      touchScale(\n        touchitem(6),\n        backsmaller(6, delta, touchitem(6)),\n        frontbiger(6, delta, touchitem(6)),\n        back,\n        mainAtlas,\n        randomIndexArr[6],\n        2,\n        56.2\n      );\n    }\n    if (oldValue[7] == 0) {\n      touchScale(\n        touchitem(7),\n        backsmaller(7, delta, touchitem(7)),\n        frontbiger(7, delta, touchitem(7)),\n        back,\n        mainAtlas,\n        randomIndexArr[7],\n        17.6,\n        56.2\n      );\n    }\n    if (oldValue[8] == 0) {\n      touchScale(\n        touchitem(8),\n        backsmaller(8, delta, touchitem(8)),\n        frontbiger(8, delta, touchitem(8)),\n        back,\n        mainAtlas,\n        randomIndexArr[8],\n        33.2,\n        56.2\n      );\n    }\n    if (oldValue[9] == 0) {\n      touchScale(\n        touchitem(9),\n        backsmaller(9, delta, touchitem(9)),\n        frontbiger(9, delta, touchitem(9)),\n        back,\n        mainAtlas,\n        randomIndexArr[9],\n        2,\n        71.8\n      );\n    }\n    if (oldValue[10] == 0) {\n      touchScale(\n        touchitem(10),\n        backsmaller(10, delta, touchitem(10)),\n        frontbiger(10, delta, touchitem(10)),\n        back,\n        mainAtlas,\n        randomIndexArr[10],\n        17.6,\n        71.8\n      );\n    }\n    if (oldValue[11] == 0) {\n      touchScale(\n        touchitem(11),\n        backsmaller(11, delta, touchitem(11)),\n        frontbiger(11, delta, touchitem(11)),\n        back,\n        mainAtlas,\n        randomIndexArr[11],\n        33.2,\n        71.8\n      );\n    }\n\n    // touchScale(touchitem(3),backsmaller(3,delta,touchitem(3)),frontbiger(3,delta,touchitem(3)), back, mainAtlas, randomIndexArr[3], 2, 40.6);\n    // touchScale(touchitem(4),backsmaller(4,delta,touchitem(4)),frontbiger(4,delta,touchitem(4)), back, mainAtlas, randomIndexArr[4], 17.6, 40.6);\n    // touchScale(touchitem(5),backsmaller(5,delta,touchitem(5)),frontbiger(5,delta,touchitem(5)), back, mainAtlas, randomIndexArr[5], 33.2,40.6);\n    // touchScale(touchitem(6),backsmaller(6,delta,touchitem(6)),frontbiger(6,delta,touchitem(6)), back, mainAtlas, randomIndexArr[6], 2, 56.2);\n    // touchScale(touchitem(7),backsmaller(7,delta,touchitem(7)),frontbiger(7,delta,touchitem(7)), back, mainAtlas, randomIndexArr[7], 17.6, 56.2);\n    // touchScale(touchitem(8),backsmaller(8,delta,touchitem(8)),frontbiger(8,delta,touchitem(8)), back, mainAtlas, randomIndexArr[8], 33.2,56.2);\n    // touchScale(touchitem(9),backsmaller(9,delta,touchitem(9)),frontbiger(9,delta,touchitem(9)), back, mainAtlas, randomIndexArr[9], 2, 71.8);\n    // touchScale(touchitem(10),backsmaller(10,delta,touchitem(10)),frontbiger(10,delta,touchitem(10)), back, mainAtlas, randomIndexArr[10], 17.6,71.8);\n    // touchScale(touchitem(11),backsmaller(11,delta,touchitem(11)),frontbiger(11,delta,touchitem(11)), back, mainAtlas, randomIndexArr[11], 33.2, 71.8);\n\n    push_IndexOf_RandomIndexArrToCompare();\n    checkLastEle_FrontBig();\n    // checkCardPosi()\n\n    compare(delta, mainAtlas, back);\n    // touchScale(touchitem(\"touchShoe\"),delta,back,backsmaller(\"back1\"),frontbiger(\"shoe\"),mainAtlas,randomIndexArr[1],17.6,25)\n\n    //     if(typeof compareValue[0] === typeof compareValue[1]  && scaleCloth > 1 && scaleShoe  > 1){ // ham compare\n    //       Compare = 1\n    //       if(compareValue[0]!=compareValue[1]){\n\n    // if(accumulate<0.5){\n\n    // mainAtlas.findRegion('item', randomIndexArr[1]).draw(batch, 17.6, 25, 14.6, 14.6, 5, 5, 0, 1,1);\n    // mainAtlas.findRegion('item', randomIndexArr[0]).draw(batch, 2, 25, 14.6, 14.6, 5, 5, 0, 1,1);\n    // }\n    // if(scaleItem1>0.02 && scaleItem2 >0.02 && accumulate >0.5 ){\n\n    // mainAtlas.findRegion('item', randomIndexArr[1]).draw(batch, 17.6, 25, 14.6, 14.6, 7.3, 7.3, 0,scaleItem2 -= 5 * delta,1);\n    // mainAtlas.findRegion('item', randomIndexArr[0]).draw(batch, 2, 25, 14.6, 14.6, 7.3, 7.3, 0,scaleItem1 -= 5 * delta,1);\n\n    // }\n\n    // if(scaleItem1<0.02&& scaleBackCompare<1){\n\n    // back.draw(batch,17.6,25,14.6,14.6,5,5,0,scaleBackCompare += 5 * delta,1);\n    // back.draw(batch,2,25,14.6,14.6,5,5,0,scaleBackCompare += 5 * delta,1);\n\n    // }\n    // if(scaleBackCompare>=1){\n    // back.draw(batch,17.6,25,14.6,14.6,5,5,0,1,1);\n    // back.draw(batch,2,25,14.6,14.6,5,5,0,1,1);\n    // touchCloth = 0\n    // touchShoe = 0\n    //  scaleBack0 = 1;\n    //  scaleBack1 = 1;\n    //  scaleBackCompare =0 ;\n    //  scaleItem1 = 1.2;\n    //  scaleItem2 = 1.2\n    //  scaleCloth = 0;\n    // scaleShoe = 0;\n    //  Compare = 0;\n    //  accumulate = 0\n\n    // }\n\n    //       }\n    //       else{\n    //         if(scaleItem1>0.02 && scaleItem2 >0.02 ){\n    //           mainAtlas.findRegion('item', randomIndexArr[1]).draw(batch, 17.6, 25, 14.6, 14.6, 7.3, 7.3, 0, scaleItem2 -= 2 * delta,scaleItem2 -= 2 * delta);\n    //           mainAtlas.findRegion('item', randomIndexArr[0]).draw(batch, 2, 25, 14.6, 14.6, 7.3, 7.3, 0, scaleItem1 -= 2 * delta,scaleItem1 -= 2 * delta);\n    //         }\n\n    //       }\n    //     }\n\n    batch.setColor(0.4, 0.4, 0.4, 1);\n\n    batch.setColor(1, 1, 1, 1);\n\n    batch.end();\n  });\n};\n\ninit();\n"],"sourceRoot":""}